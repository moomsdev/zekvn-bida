{"version":3,"file":"use-query-params.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AAIE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClB4C;AA2BvB;AAiBH;AAKQ;AAC8B;AACA;AACM;AACA;AAkD5D;AACF;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrByC;AACzC;AACA,UAAU,oDAAsB;AAChC,UAAU,oDAAsB;AAChC;AACA;AACA,UAAU,oDAAsB;AAChC,qBAAqB,kDAAoB;AACzC,CAAC;AACD;AACA,oBAAoB,mDAAqB;AACzC,qBAAqB,uDAAyB;AAC9C,CAAC;AACD;AACA,oBAAoB,4DAA8B;AAClD;AACA;AACA;AACA,qBAAqB,gEAAkC;AACvD,CAAC;AACD;AACA,UAAU,oDAAsB;AAChC,UAAU,oDAAsB;AAChC;AACA;AACA,UAAU,oDAAsB;AAChC,UAAU,oDAAsB;AAChC;AACA;AACA,UAAU,mDAAqB;AAC/B,UAAU,mDAAqB;AAC/B;AACA;AACA,UAAU,0DAA4B;AACtC,UAAU,0DAA4B;AACtC;AACA;AACA,UAAU,kDAAoB;AAC9B,UAAU,kDAAoB;AAC9B;AACA;AACA,UAAU,kDAAoB;AAC9B,UAAU,kDAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sDAAwB;AAClC,UAAU,sDAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,qDAAuB;AACjC,UAAU,qDAAuB;AACjC;AACA;AACA,UAAU,2DAA6B;AACvC,UAAU,2DAA6B;AACvC;AACA;AACA,UAAU,4DAA8B;AACxC,UAAU,4DAA8B;AACxC;AACA;AACA,UAAU,mEAAqC;AAC/C,UAAU,mEAAqC;AAC/C;AAiBE;AACF;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK,GAAG,iBAAiB,MAAM,UAAU,GAAG,eAAe,IAAI,QAAQ;AACngBAAgB,EAAE,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6BE;AACF;;;;;;;;;;;;;;;;;;;AC/P8D;AACrB;AACzC,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW,EAAE,aAAa,EAAE,OAAO;AACnD,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uEAAoB;AAC7F;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,uEAAoB,2BAA2B,mDAAoB;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AAKE;AACF;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AAIE;AACF;;;;;;;;;;;;;;;;;;;;ACtB+B;AAIZ;AACnB;AACA,aAAa;AACb,WAAW,oDAAc;AACzB;AACA,0BAA0B,gDAAmB;AAC7C;AACA;AACA;AACA,gBAAgB,6CAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,UAAU,iDAAiD,EAAE,6CAAgB;AAC7E,gBAAgB,0CAAa;AAC7B;AACA;AACA,eAAe,sDAAY;AAC3B;AACA;AACA;AACA;AACA,GAAG;AACH,yBAAyB,gDAAmB;AAC5C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mCAAmC,gDAAmB,8CAA8C,gDAAmB;AACvH;AACA;AACA,GAAG,+BAA+B,gDAAmB;AACrD;AACA,GAAG;AACH;AACA;AAME;AACF;;;;;;;;;;;;;;;;;AC1D8C;AAC9C;AACA;AACA;AACA,CAAC;AACD,4BAA4B,2DAAc;AAC1C,oBAAoB,iBAAiB;AACrC;AACA;AAIE;AACF;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDuC;AACf;AACwB;AACE;AACyB;AAC/B;AACc;AAQxD;AACF;;;;;;;;;;;;;;;;;ACbgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,+DAAW;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACF;;;;;;;;;;;;;;;;;AC/C0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AAIE;AACF;;;;;;;;;;;;;;;;;ACtD0C;AACQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;;;AC7BgC;AAChC;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,sBAAsB;AACtB;AACA;AACA;AAIE;AACF;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;AChCA;;;;;;;;;;;;;;;;;;;;;;;ACEgC;AACwB;AACK;AACL;AACc;AACpB;AACR;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,UAAU,6CAA6C;AACvD;AACA;AACA;AACA,uBAAuB,mFAAwB;AAC/C;AACA;AACA;AACA,yBAAyB,0EAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAsB;AAC/C;AACA;AACA,MAAM,iEAAiB;AACvB;AACA;AACA,IAAI;AACJ;AACA;AACA,mBAAmB,yEAAiB;AACpC;AACA,IAAI,+DAAc;AAClB;AACA,mBAAmB,uDAAa;AAChC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY,IAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AAKE;AACF;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ,IAAI,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AAKE;AACF;;;;;;;;;;;;;;;;;;ACtC6C;AACC;AAC9C;AACA,yBAAyB,8CAAO;AAChC,aAAa,uDAAuD;AACpE;AACA;AACA,4BAA4B,2DAAc;AAC1C;AACA,mBAAmB,kDAAW;AAC9B;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA,wBAAwB,kBAAkB;AAC1C,KAAK;AACL;AACA;AACA;AACA;AAGE;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1B6D;AAG7B;AACwB;AAI7B;AACuC;AACI;AAC7B;AACmB;AACP;AACL;AAChD;AACA,UAAU,mCAAmC,EAAE,yEAAoB;AACnE,4BAA4B,+CAAQ,CAAC,2EAAgC;AACrE,UAAU,qDAAqD;AAC/D;AACA;AACA;AACA,wBAAwB,8CAAO;AAC/B,WAAW,sDAAY;AACvB,GAAG;AACH,uBAAuB,sFAAoC;AAC3D;AACA;AACA;AACA,uBAAuB,mFAAwB;AAC/C;AACA;AACA,IAAI,6DAAmB;AACvB;AACA;AACA,qBAAqB,0EAAwB;AAC7C;AACA;AACA;AACA,MAAM,+DAAW;AACjB;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAiB;AACrB;AACA;AACA,EAAE,gDAAS;AACX;AACA,IAAI,iEAAiB;AACrB;AACA,MAAM,iEAAiB;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,kCAAkC,6CAAM;AACxC;AACA;AACA;AACA,EAAE,gDAAS;AACX;AACA;AACA;AACA,GAAG;AACH,qBAAqB,+CAAQ;AAC7B;AACA,cAAc,wEAAwE;AACtF;AACA;AACA,MAAM,kEAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,WAAW;AACX;AAIE;AACF;;;;;;;;;;;;;;;;;;;;AChH+B;AACe;AAC9C;AACA;AACA,8BAA8B,2DAAc;AAC5C,2BAA2B,gDAAmB;AAC9C;AACA;AACA;AACA,KAAK;AACL;AACA,6CAA6C,qEAAqE;AAClH;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAc;AAC5C;AACA,2BAA2B,gDAAmB;AAC9C;AACA;AACA,KAAK;AACL;AACA,6CAA6C,qEAAqE;AAClH;AACA;AAKE;AACF;;;;;;;;;;;;AChCA,iC;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;;;;;;;;;;;;;ACNiC","sources":["webpack://popup-maker/core/./node_modules/serialize-query-params/dist/decodeQueryParams.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/encodeQueryParams.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/index.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/objectToSearchString.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/params.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/searchStringToObject.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/serialize.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/updateLocation.js?","webpack://popup-maker/core/./node_modules/serialize-query-params/dist/withDefault.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/QueryParamProvider.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/QueryParams.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/decodedParamCache.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/index.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/inheritedParams.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/latestValues.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/memoSearchStringToObject.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/options.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/removeDefaults.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/shallowEqual.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/types.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/updateSearchString.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/urlName.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/useQueryParam.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/useQueryParams.js?","webpack://popup-maker/core/./packages/use-query-params/node_modules/use-query-params/dist/withQueryParams.js?","webpack://popup-maker/core/external window \"React\"?","webpack://popup-maker/core/webpack/bootstrap?","webpack://popup-maker/core/webpack/runtime/compat get default export?","webpack://popup-maker/core/webpack/runtime/define property getters?","webpack://popup-maker/core/webpack/runtime/hasOwnProperty shorthand?","webpack://popup-maker/core/webpack/runtime/make namespace object?","webpack://popup-maker/core/./packages/use-query-params/src/index.ts?"],"sourcesContent":["function decodeQueryParams(paramConfigMap, encodedQuery) {\n  const decodedQuery = {};\n  const paramNames = Object.keys(paramConfigMap);\n  for (const encodedKey of Object.keys(encodedQuery)) {\n    if (paramConfigMap[encodedKey] == null) {\n      paramNames.push(encodedKey);\n    }\n  }\n  for (const paramName of paramNames) {\n    const encodedValue = encodedQuery[paramName];\n    if (!paramConfigMap[paramName]) {\n      if (true) {\n        console.warn(\n          `Passing through parameter ${paramName} during decoding since it was not configured.`\n        );\n      }\n      decodedQuery[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n    }\n  }\n  return decodedQuery;\n}\nexport {\n  decodeQueryParams\n};\n//# sourceMappingURL=decodeQueryParams.js.map\n","function encodeQueryParams(paramConfigMap, query) {\n  const encodedQuery = {};\n  const paramNames = Object.keys(query);\n  for (const paramName of paramNames) {\n    const decodedValue = query[paramName];\n    if (!paramConfigMap[paramName]) {\n      encodedQuery[paramName] = decodedValue == null ? decodedValue : String(decodedValue);\n    } else {\n      encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n    }\n  }\n  return encodedQuery;\n}\nvar encodeQueryParams_default = encodeQueryParams;\nexport {\n  encodeQueryParams_default as default,\n  encodeQueryParams\n};\n//# sourceMappingURL=encodeQueryParams.js.map\n","import { withDefault } from \"./withDefault\";\nimport {\n  encodeDate,\n  decodeDate,\n  encodeBoolean,\n  decodeBoolean,\n  encodeNumber,\n  decodeNumber,\n  encodeString,\n  decodeString,\n  decodeEnum,\n  decodeArrayEnum,\n  decodeDelimitedArrayEnum,\n  encodeJson,\n  decodeJson,\n  encodeArray,\n  decodeArray,\n  encodeNumericArray,\n  decodeNumericArray,\n  encodeDelimitedArray,\n  decodeDelimitedArray,\n  encodeDelimitedNumericArray,\n  decodeDelimitedNumericArray,\n  encodeObject,\n  decodeObject,\n  encodeNumericObject,\n  decodeNumericObject\n} from \"./serialize\";\nimport {\n  StringParam,\n  NumberParam,\n  ObjectParam,\n  ArrayParam,\n  NumericArrayParam,\n  JsonParam,\n  DateParam,\n  DateTimeParam,\n  BooleanParam,\n  NumericObjectParam,\n  DelimitedArrayParam,\n  DelimitedNumericArrayParam,\n  createEnumParam,\n  createEnumArrayParam,\n  createEnumDelimitedArrayParam\n} from \"./params\";\nimport {\n  updateLocation,\n  updateInLocation,\n  transformSearchStringJsonSafe\n} from \"./updateLocation\";\nimport { encodeQueryParams } from \"./encodeQueryParams\";\nimport { decodeQueryParams } from \"./decodeQueryParams\";\nimport { searchStringToObject } from \"./searchStringToObject\";\nimport { objectToSearchString } from \"./objectToSearchString\";\nexport {\n  ArrayParam,\n  BooleanParam,\n  DateParam,\n  DateTimeParam,\n  DelimitedArrayParam,\n  DelimitedNumericArrayParam,\n  JsonParam,\n  NumberParam,\n  NumericArrayParam,\n  NumericObjectParam,\n  ObjectParam,\n  StringParam,\n  createEnumArrayParam,\n  createEnumDelimitedArrayParam,\n  createEnumParam,\n  decodeArray,\n  decodeArrayEnum,\n  decodeBoolean,\n  decodeDate,\n  decodeDelimitedArray,\n  decodeDelimitedArrayEnum,\n  decodeDelimitedNumericArray,\n  decodeEnum,\n  decodeJson,\n  decodeNumber,\n  decodeNumericArray,\n  decodeNumericObject,\n  decodeObject,\n  decodeQueryParams,\n  decodeString,\n  encodeArray,\n  encodeBoolean,\n  encodeDate,\n  encodeDelimitedArray,\n  encodeDelimitedNumericArray,\n  encodeJson,\n  encodeNumber,\n  encodeNumericArray,\n  encodeNumericObject,\n  encodeObject,\n  encodeQueryParams,\n  encodeString,\n  objectToSearchString,\n  searchStringToObject,\n  transformSearchStringJsonSafe,\n  updateInLocation,\n  updateLocation,\n  withDefault\n};\n//# sourceMappingURL=index.js.map\n","function objectToSearchString(encodedParams) {\n  const params = new URLSearchParams();\n  const entries = Object.entries(encodedParams);\n  for (const [key, value] of entries) {\n    if (value === void 0)\n      continue;\n    if (value === null)\n      continue;\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        params.append(key, item != null ? item : \"\");\n      }\n    } else {\n      params.append(key, value);\n    }\n  }\n  return params.toString();\n}\nexport {\n  objectToSearchString\n};\n//# sourceMappingURL=objectToSearchString.js.map\n","import * as Serialize from \"./serialize\";\nconst StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\nconst createEnumParam = (enumValues) => ({\n  encode: Serialize.encodeString,\n  decode: (input) => Serialize.decodeEnum(input, enumValues)\n});\nconst createEnumArrayParam = (enumValues) => ({\n  encode: (text) => Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: (input) => Serialize.decodeArrayEnum(input, enumValues)\n});\nconst createEnumDelimitedArrayParam = (enumValues, entrySeparator = \"_\") => ({\n  encode: (text) => Serialize.encodeDelimitedArray(\n    text == null || Array.isArray(text) ? text : [text],\n    entrySeparator\n  ),\n  decode: (input) => Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator)\n});\nconst NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\nconst ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\nconst ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\nconst NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\nconst JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\nconst DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB)\n      return true;\n    if (valueA == null || valueB == null)\n      return valueA === valueB;\n    return valueA.getFullYear() === valueB.getFullYear() && valueA.getMonth() === valueB.getMonth() && valueA.getDate() === valueB.getDate();\n  }\n};\nconst DateTimeParam = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB)\n      return true;\n    if (valueA == null || valueB == null)\n      return valueA === valueB;\n    return valueA.valueOf() === valueB.valueOf();\n  }\n};\nconst BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\nconst NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\nconst DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\nconst DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};\nexport {\n  ArrayParam,\n  BooleanParam,\n  DateParam,\n  DateTimeParam,\n  DelimitedArrayParam,\n  DelimitedNumericArrayParam,\n  JsonParam,\n  NumberParam,\n  NumericArrayParam,\n  NumericObjectParam,\n  ObjectParam,\n  StringParam,\n  createEnumArrayParam,\n  createEnumDelimitedArrayParam,\n  createEnumParam\n};\n//# sourceMappingURL=params.js.map\n","function searchStringToObject(searchString) {\n  const params = new URLSearchParams(searchString);\n  const parsed = {};\n  for (let [key, value] of params) {\n    if (Object.prototype.hasOwnProperty.call(parsed, key)) {\n      if (Array.isArray(parsed[key])) {\n        parsed[key].push(value);\n      } else {\n        parsed[key] = [parsed[key], value];\n      }\n    } else {\n      parsed[key] = value;\n    }\n  }\n  return parsed;\n}\nexport {\n  searchStringToObject\n};\n//# sourceMappingURL=searchStringToObject.js.map\n","function getEncodedValue(input, allowEmptyString) {\n  if (input == null) {\n    return input;\n  }\n  if (input.length === 0 && (!allowEmptyString || allowEmptyString && input !== \"\")) {\n    return null;\n  }\n  const str = input instanceof Array ? input[0] : input;\n  if (str == null) {\n    return str;\n  }\n  if (!allowEmptyString && str === \"\") {\n    return null;\n  }\n  return str;\n}\nfunction getEncodedValueArray(input) {\n  if (input == null) {\n    return input;\n  }\n  return input instanceof Array ? input : input === \"\" ? [] : [input];\n}\nfunction encodeDate(date) {\n  if (date == null) {\n    return date;\n  }\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  return `${year}-${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`;\n}\nfunction decodeDate(input) {\n  const dateString = getEncodedValue(input);\n  if (dateString == null)\n    return dateString;\n  const parts = dateString.split(\"-\");\n  if (parts[1] != null) {\n    parts[1] -= 1;\n  } else {\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n  const decoded = new Date(...parts);\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n  return decoded;\n}\nfunction encodeDateTime(date) {\n  if (date == null) {\n    return date;\n  }\n  return date.toISOString();\n}\nfunction decodeDateTime(input) {\n  const dateString = getEncodedValue(input);\n  if (dateString == null)\n    return dateString;\n  const decoded = new Date(dateString);\n  if (isNaN(decoded.getTime())) {\n    return null;\n  }\n  return decoded;\n}\nfunction encodeBoolean(bool) {\n  if (bool == null) {\n    return bool;\n  }\n  return bool ? \"1\" : \"0\";\n}\nfunction decodeBoolean(input) {\n  const boolStr = getEncodedValue(input);\n  if (boolStr == null)\n    return boolStr;\n  if (boolStr === \"1\") {\n    return true;\n  } else if (boolStr === \"0\") {\n    return false;\n  }\n  return null;\n}\nfunction encodeNumber(num) {\n  if (num == null) {\n    return num;\n  }\n  return String(num);\n}\nfunction decodeNumber(input) {\n  const numStr = getEncodedValue(input);\n  if (numStr == null)\n    return numStr;\n  if (numStr === \"\")\n    return null;\n  const result = +numStr;\n  return result;\n}\nfunction encodeString(str) {\n  if (str == null) {\n    return str;\n  }\n  return String(str);\n}\nfunction decodeString(input) {\n  const str = getEncodedValue(input, true);\n  if (str == null)\n    return str;\n  return String(str);\n}\nfunction decodeEnum(input, enumValues) {\n  const str = decodeString(input);\n  if (str == null)\n    return str;\n  return enumValues.includes(str) ? str : void 0;\n}\nfunction decodeArrayEnum(input, enumValues) {\n  const arr = decodeArray(input);\n  if (arr == null)\n    return arr;\n  if (!arr.length)\n    return void 0;\n  return arr.every((str) => str != null && enumValues.includes(str)) ? arr : void 0;\n}\nfunction decodeDelimitedArrayEnum(input, enumValues, entrySeparator = \"_\") {\n  if (input != null && Array.isArray(input) && !input.length)\n    return void 0;\n  const arr = decodeDelimitedArray(input, entrySeparator);\n  return decodeArrayEnum(arr, enumValues);\n}\nfunction encodeJson(any) {\n  if (any == null) {\n    return any;\n  }\n  return JSON.stringify(any);\n}\nfunction decodeJson(input) {\n  const jsonStr = getEncodedValue(input);\n  if (jsonStr == null)\n    return jsonStr;\n  let result = null;\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n  }\n  return result;\n}\nfunction encodeArray(array) {\n  if (array == null) {\n    return array;\n  }\n  return array;\n}\nfunction decodeArray(input) {\n  const arr = getEncodedValueArray(input);\n  if (arr == null)\n    return arr;\n  return arr;\n}\nfunction encodeNumericArray(array) {\n  if (array == null) {\n    return array;\n  }\n  return array.map(String);\n}\nfunction decodeNumericArray(input) {\n  const arr = decodeArray(input);\n  if (arr == null)\n    return arr;\n  return arr.map((d) => d === \"\" || d == null ? null : +d);\n}\nfunction encodeDelimitedArray(array, entrySeparator = \"_\") {\n  if (array == null) {\n    return array;\n  }\n  return array.join(entrySeparator);\n}\nfunction decodeDelimitedArray(input, entrySeparator = \"_\") {\n  const arrayStr = getEncodedValue(input, true);\n  if (arrayStr == null)\n    return arrayStr;\n  if (arrayStr === \"\")\n    return [];\n  return arrayStr.split(entrySeparator);\n}\nconst encodeDelimitedNumericArray = encodeDelimitedArray;\nfunction decodeDelimitedNumericArray(arrayStr, entrySeparator = \"_\") {\n  const decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n  if (decoded == null)\n    return decoded;\n  return decoded.map((d) => d === \"\" || d == null ? null : +d);\n}\nfunction encodeObject(obj, keyValSeparator = \"-\", entrySeparator = \"_\") {\n  if (obj == null)\n    return obj;\n  if (!Object.keys(obj).length)\n    return \"\";\n  return Object.keys(obj).map((key) => `${key}${keyValSeparator}${obj[key]}`).join(entrySeparator);\n}\nfunction decodeObject(input, keyValSeparator = \"-\", entrySeparator = \"_\") {\n  const objStr = getEncodedValue(input, true);\n  if (objStr == null)\n    return objStr;\n  if (objStr === \"\")\n    return {};\n  const obj = {};\n  const keyValSeparatorRegExp = new RegExp(`${keyValSeparator}(.*)`);\n  objStr.split(entrySeparator).forEach((entryStr) => {\n    const [key, value] = entryStr.split(keyValSeparatorRegExp);\n    obj[key] = value;\n  });\n  return obj;\n}\nconst encodeNumericObject = encodeObject;\nfunction decodeNumericObject(input, keyValSeparator = \"-\", entrySeparator = \"_\") {\n  const decoded = decodeObject(\n    input,\n    keyValSeparator,\n    entrySeparator\n  );\n  if (decoded == null)\n    return decoded;\n  const decodedNumberObj = {};\n  for (const key of Object.keys(decoded)) {\n    decodedNumberObj[key] = decodeNumber(decoded[key]);\n  }\n  return decodedNumberObj;\n}\nexport {\n  decodeArray,\n  decodeArrayEnum,\n  decodeBoolean,\n  decodeDate,\n  decodeDateTime,\n  decodeDelimitedArray,\n  decodeDelimitedArrayEnum,\n  decodeDelimitedNumericArray,\n  decodeEnum,\n  decodeJson,\n  decodeNumber,\n  decodeNumericArray,\n  decodeNumericObject,\n  decodeObject,\n  decodeString,\n  encodeArray,\n  encodeBoolean,\n  encodeDate,\n  encodeDateTime,\n  encodeDelimitedArray,\n  encodeDelimitedNumericArray,\n  encodeJson,\n  encodeNumber,\n  encodeNumericArray,\n  encodeNumericObject,\n  encodeObject,\n  encodeString\n};\n//# sourceMappingURL=serialize.js.map\n","import { objectToSearchString } from \"./objectToSearchString\";\nimport { searchStringToObject } from \".\";\nconst JSON_SAFE_CHARS = `{}[],\":`.split(\"\").map((d) => [d, encodeURIComponent(d)]);\nfunction getHrefFromLocation(location, search) {\n  let href = search;\n  if (location.href) {\n    try {\n      const url = new URL(location.href);\n      href = `${url.origin}${url.pathname}${search}`;\n    } catch (e) {\n      href = \"\";\n    }\n  }\n  return href;\n}\nfunction transformSearchStringJsonSafe(searchString) {\n  let str = searchString;\n  for (let [char, code] of JSON_SAFE_CHARS) {\n    str = str.replace(new RegExp(\"\\\\\" + code, \"g\"), char);\n  }\n  return str;\n}\nfunction updateLocation(encodedQuery, location, objectToSearchStringFn = objectToSearchString) {\n  let encodedSearchString = objectToSearchStringFn(encodedQuery);\n  const search = encodedSearchString.length ? `?${encodedSearchString}` : \"\";\n  const newLocation = {\n    ...location,\n    key: `${Date.now()}`,\n    href: getHrefFromLocation(location, search),\n    search,\n    query: encodedQuery\n  };\n  return newLocation;\n}\nfunction updateInLocation(encodedQueryReplacements, location, objectToSearchStringFn = objectToSearchString, searchStringToObjectFn = searchStringToObject) {\n  const currQuery = searchStringToObjectFn(location.search);\n  const newQuery = {\n    ...currQuery,\n    ...encodedQueryReplacements\n  };\n  return updateLocation(newQuery, location, objectToSearchStringFn);\n}\nexport {\n  transformSearchStringJsonSafe,\n  updateInLocation,\n  updateLocation\n};\n//# sourceMappingURL=updateLocation.js.map\n","function withDefault(param, defaultValue, includeNull = true) {\n  const decodeWithDefault = (...args) => {\n    const decodedValue = param.decode(...args);\n    if (decodedValue === void 0) {\n      return defaultValue;\n    }\n    if (includeNull) {\n      if (decodedValue === null) {\n        return defaultValue;\n      } else {\n        return decodedValue;\n      }\n    }\n    return decodedValue;\n  };\n  return { ...param, default: defaultValue, decode: decodeWithDefault };\n}\nvar withDefault_default = withDefault;\nexport {\n  withDefault_default as default,\n  withDefault\n};\n//# sourceMappingURL=withDefault.js.map\n","import * as React from \"react\";\nimport {\n  mergeOptions,\n  defaultOptions\n} from \"./options\";\nconst providerlessContextValue = {\n  adapter: {},\n  options: defaultOptions\n};\nconst QueryParamContext = React.createContext(\n  providerlessContextValue\n);\nfunction useQueryParamContext() {\n  const value = React.useContext(QueryParamContext);\n  if (value === void 0 || value === providerlessContextValue) {\n    throw new Error(\"useQueryParams must be used within a QueryParamProvider\");\n  }\n  return value;\n}\nfunction QueryParamProviderInner({\n  children,\n  adapter,\n  options\n}) {\n  const { adapter: parentAdapter, options: parentOptions } = React.useContext(QueryParamContext);\n  const value = React.useMemo(() => {\n    return {\n      adapter: adapter != null ? adapter : parentAdapter,\n      options: mergeOptions(\n        parentOptions,\n        options\n      )\n    };\n  }, [adapter, options, parentAdapter, parentOptions]);\n  return /* @__PURE__ */ React.createElement(QueryParamContext.Provider, {\n    value\n  }, children);\n}\nfunction QueryParamProvider({\n  children,\n  adapter,\n  options\n}) {\n  const Adapter = adapter;\n  return Adapter ? /* @__PURE__ */ React.createElement(Adapter, null, (adapter2) => /* @__PURE__ */ React.createElement(QueryParamProviderInner, {\n    adapter: adapter2,\n    options\n  }, children)) : /* @__PURE__ */ React.createElement(QueryParamProviderInner, {\n    options\n  }, children);\n}\nvar QueryParamProvider_default = QueryParamProvider;\nexport {\n  QueryParamContext,\n  QueryParamProvider,\n  QueryParamProvider_default as default,\n  useQueryParamContext\n};\n//# sourceMappingURL=QueryParamProvider.js.map\n","import useQueryParams from \"./useQueryParams\";\nconst QueryParams = ({\n  config,\n  children\n}) => {\n  const [query, setQuery] = useQueryParams(config);\n  return children({ query, setQuery });\n};\nvar QueryParams_default = QueryParams;\nexport {\n  QueryParams,\n  QueryParams_default as default\n};\n//# sourceMappingURL=QueryParams.js.map\n","class DecodedParamCache {\n  constructor() {\n    this.paramsMap = /* @__PURE__ */ new Map();\n    this.registeredParams = /* @__PURE__ */ new Map();\n  }\n  set(param, stringifiedValue, decodedValue, decode) {\n    this.paramsMap.set(param, {\n      stringified: stringifiedValue,\n      decoded: decodedValue,\n      decode\n    });\n  }\n  has(param, stringifiedValue, decode) {\n    if (!this.paramsMap.has(param))\n      return false;\n    const cachedParam = this.paramsMap.get(param);\n    if (!cachedParam)\n      return false;\n    return cachedParam.stringified === stringifiedValue && (decode == null || cachedParam.decode === decode);\n  }\n  get(param) {\n    var _a;\n    if (this.paramsMap.has(param))\n      return (_a = this.paramsMap.get(param)) == null ? void 0 : _a.decoded;\n    return void 0;\n  }\n  registerParams(paramNames) {\n    for (const param of paramNames) {\n      const currValue = this.registeredParams.get(param) || 0;\n      this.registeredParams.set(param, currValue + 1);\n    }\n  }\n  unregisterParams(paramNames) {\n    for (const param of paramNames) {\n      const value = (this.registeredParams.get(param) || 0) - 1;\n      if (value <= 0) {\n        this.registeredParams.delete(param);\n        if (this.paramsMap.has(param)) {\n          this.paramsMap.delete(param);\n        }\n      } else {\n        this.registeredParams.set(param, value);\n      }\n    }\n  }\n  clear() {\n    this.paramsMap.clear();\n    this.registeredParams.clear();\n  }\n}\nconst decodedParamCache = new DecodedParamCache();\nexport {\n  DecodedParamCache,\n  decodedParamCache\n};\n//# sourceMappingURL=decodedParamCache.js.map\n","export * from \"serialize-query-params\";\nexport * from \"./types\";\nimport { useQueryParam } from \"./useQueryParam\";\nimport { useQueryParams } from \"./useQueryParams\";\nimport { withQueryParams, withQueryParamsMapped } from \"./withQueryParams\";\nimport { QueryParams } from \"./QueryParams\";\nimport { QueryParamProvider } from \"./QueryParamProvider\";\nexport {\n  QueryParamProvider,\n  QueryParams,\n  useQueryParam,\n  useQueryParams,\n  withQueryParams,\n  withQueryParamsMapped\n};\n//# sourceMappingURL=index.js.map\n","import {\n  StringParam\n} from \"serialize-query-params\";\nfunction convertInheritedParamStringsToParams(paramConfigMapWithInherit, options) {\n  var _a, _b, _c;\n  const paramConfigMap = {};\n  let hasInherit = false;\n  const hookKeys = Object.keys(paramConfigMapWithInherit);\n  let paramKeys = hookKeys;\n  const includeKnownParams = options.includeKnownParams || options.includeKnownParams !== false && hookKeys.length === 0;\n  if (includeKnownParams) {\n    const knownKeys = Object.keys((_a = options.params) != null ? _a : {});\n    paramKeys.push(...knownKeys);\n  }\n  for (const key of paramKeys) {\n    const param = paramConfigMapWithInherit[key];\n    if (param != null && typeof param === \"object\") {\n      paramConfigMap[key] = param;\n      continue;\n    }\n    hasInherit = true;\n    paramConfigMap[key] = (_c = (_b = options.params) == null ? void 0 : _b[key]) != null ? _c : StringParam;\n  }\n  if (!hasInherit)\n    return paramConfigMapWithInherit;\n  return paramConfigMap;\n}\nfunction extendParamConfigForKeys(baseParamConfigMap, paramKeys, inheritedParams, defaultParam) {\n  var _a;\n  if (!inheritedParams || !paramKeys.length)\n    return baseParamConfigMap;\n  let paramConfigMap = { ...baseParamConfigMap };\n  let hasInherit = false;\n  for (const paramKey of paramKeys) {\n    if (!Object.prototype.hasOwnProperty.call(paramConfigMap, paramKey)) {\n      paramConfigMap[paramKey] = (_a = inheritedParams[paramKey]) != null ? _a : defaultParam;\n      hasInherit = true;\n    }\n  }\n  if (!hasInherit)\n    return baseParamConfigMap;\n  return paramConfigMap;\n}\nexport {\n  convertInheritedParamStringsToParams,\n  extendParamConfigForKeys\n};\n//# sourceMappingURL=inheritedParams.js.map\n","import shallowEqual from \"./shallowEqual\";\nfunction getLatestDecodedValues(parsedParams, paramConfigMap, decodedParamCache) {\n  const decodedValues = {};\n  const paramNames = Object.keys(paramConfigMap);\n  for (const paramName of paramNames) {\n    const paramConfig = paramConfigMap[paramName];\n    const encodedValue = parsedParams[paramName];\n    let decodedValue;\n    if (decodedParamCache.has(paramName, encodedValue, paramConfig.decode)) {\n      decodedValue = decodedParamCache.get(paramName);\n    } else {\n      decodedValue = paramConfig.decode(encodedValue);\n      if (paramConfig.equals && decodedParamCache.has(paramName, encodedValue)) {\n        const oldDecodedValue = decodedParamCache.get(paramName);\n        if (paramConfig.equals(decodedValue, oldDecodedValue)) {\n          decodedValue = oldDecodedValue;\n        }\n      }\n      if (decodedValue !== void 0) {\n        decodedParamCache.set(\n          paramName,\n          encodedValue,\n          decodedValue,\n          paramConfig.decode\n        );\n      }\n    }\n    if (decodedValue === void 0 && paramConfig.default !== void 0) {\n      decodedValue = paramConfig.default;\n    }\n    decodedValues[paramName] = decodedValue;\n  }\n  return decodedValues;\n}\nfunction makeStableGetLatestDecodedValues() {\n  let prevDecodedValues;\n  function stableGetLatest(parsedParams, paramConfigMap, decodedParamCache) {\n    const decodedValues = getLatestDecodedValues(\n      parsedParams,\n      paramConfigMap,\n      decodedParamCache\n    );\n    if (prevDecodedValues != null && shallowEqual(prevDecodedValues, decodedValues)) {\n      return prevDecodedValues;\n    }\n    prevDecodedValues = decodedValues;\n    return decodedValues;\n  }\n  return stableGetLatest;\n}\nexport {\n  getLatestDecodedValues,\n  makeStableGetLatestDecodedValues\n};\n//# sourceMappingURL=latestValues.js.map\n","import shallowEqual from \"./shallowEqual\";\nimport { deserializeUrlNameMap } from \"./urlName\";\nlet cachedSearchString;\nlet cachedUrlNameMapString;\nlet cachedSearchStringToObjectFn;\nlet cachedParsedQuery = {};\nconst memoSearchStringToObject = (searchStringToObject, searchString, urlNameMapStr) => {\n  if (cachedSearchString === searchString && cachedSearchStringToObjectFn === searchStringToObject && cachedUrlNameMapString === urlNameMapStr) {\n    return cachedParsedQuery;\n  }\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString != null ? searchString : \"\");\n  cachedUrlNameMapString = urlNameMapStr;\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    if (urlNameMap == null ? void 0 : urlNameMap[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\nexport {\n  memoSearchStringToObject\n};\n//# sourceMappingURL=memoSearchStringToObject.js.map\n","import {\n  searchStringToObject,\n  objectToSearchString\n} from \"serialize-query-params\";\nconst defaultOptions = {\n  searchStringToObject,\n  objectToSearchString,\n  updateType: \"pushIn\",\n  includeKnownParams: void 0,\n  includeAllParams: false,\n  removeDefaultsFromUrl: false,\n  enableBatching: false,\n  skipUpdateWhenNoChange: true\n};\nfunction mergeOptions(parentOptions, currOptions) {\n  if (currOptions == null) {\n    currOptions = {};\n  }\n  const merged = { ...parentOptions, ...currOptions };\n  if (currOptions.params && parentOptions.params) {\n    merged.params = { ...parentOptions.params, ...currOptions.params };\n  }\n  return merged;\n}\nexport {\n  defaultOptions,\n  mergeOptions\n};\n//# sourceMappingURL=options.js.map\n","function removeDefaults(encodedValues, paramConfigMap) {\n  var _a;\n  for (const paramName in encodedValues) {\n    if (((_a = paramConfigMap[paramName]) == null ? void 0 : _a.default) !== void 0 && encodedValues[paramName] !== void 0) {\n      const encodedDefault = paramConfigMap[paramName].encode(\n        paramConfigMap[paramName].default\n      );\n      if (encodedDefault === encodedValues[paramName]) {\n        encodedValues[paramName] = void 0;\n      }\n    }\n  }\n}\nexport {\n  removeDefaults\n};\n//# sourceMappingURL=removeDefaults.js.map\n","const hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nfunction shallowEqual(objA, objB, equalMap) {\n  var _a, _b;\n  if (is(objA, objB)) {\n    return true;\n  }\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  for (let i = 0; i < keysA.length; i++) {\n    const isEqual = (_b = (_a = equalMap == null ? void 0 : equalMap[keysA[i]]) == null ? void 0 : _a.equals) != null ? _b : is;\n    if (!hasOwnProperty.call(objB, keysA[i]) || !isEqual(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\nexport {\n  shallowEqual as default\n};\n//# sourceMappingURL=shallowEqual.js.map\n","//# sourceMappingURL=types.js.map\n","import {\n  encodeQueryParams\n} from \"serialize-query-params\";\nimport { decodedParamCache } from \"./decodedParamCache\";\nimport { extendParamConfigForKeys } from \"./inheritedParams\";\nimport { getLatestDecodedValues } from \"./latestValues\";\nimport { memoSearchStringToObject } from \"./memoSearchStringToObject\";\nimport { removeDefaults } from \"./removeDefaults\";\nimport { applyUrlNames } from \"./urlName\";\nfunction getUpdatedSearchString({\n  changes,\n  updateType,\n  currentSearchString,\n  paramConfigMap: baseParamConfigMap,\n  options\n}) {\n  const { searchStringToObject, objectToSearchString } = options;\n  if (updateType == null)\n    updateType = options.updateType;\n  let encodedChanges;\n  const parsedParams = memoSearchStringToObject(\n    searchStringToObject,\n    currentSearchString\n  );\n  const paramConfigMap = extendParamConfigForKeys(\n    baseParamConfigMap,\n    Object.keys(changes),\n    options.params\n  );\n  let changesToUse;\n  if (typeof changes === \"function\") {\n    const latestValues = getLatestDecodedValues(\n      parsedParams,\n      paramConfigMap,\n      decodedParamCache\n    );\n    changesToUse = changes(latestValues);\n  } else {\n    changesToUse = changes;\n  }\n  encodedChanges = encodeQueryParams(paramConfigMap, changesToUse);\n  if (options.removeDefaultsFromUrl) {\n    removeDefaults(encodedChanges, paramConfigMap);\n  }\n  encodedChanges = applyUrlNames(encodedChanges, paramConfigMap);\n  let newSearchString;\n  if (updateType === \"push\" || updateType === \"replace\") {\n    newSearchString = objectToSearchString(encodedChanges);\n  } else {\n    newSearchString = objectToSearchString({\n      ...parsedParams,\n      ...encodedChanges\n    });\n  }\n  if ((newSearchString == null ? void 0 : newSearchString.length) && newSearchString[0] !== \"?\") {\n    newSearchString = `?${newSearchString}`;\n  }\n  return newSearchString != null ? newSearchString : \"\";\n}\nfunction updateSearchString({\n  searchString,\n  adapter,\n  navigate,\n  updateType\n}) {\n  const currentLocation = adapter.location;\n  const newLocation = {\n    ...currentLocation,\n    search: searchString\n  };\n  if (navigate) {\n    if (typeof updateType === \"string\" && updateType.startsWith(\"replace\")) {\n      adapter.replace(newLocation);\n    } else {\n      adapter.push(newLocation);\n    }\n  }\n}\nconst immediateTask = (task) => task();\nconst timeoutTask = (task) => setTimeout(() => task(), 0);\nconst updateQueue = [];\nfunction enqueueUpdate(args, { immediate } = {}) {\n  updateQueue.push(args);\n  let scheduleTask = immediate ? immediateTask : timeoutTask;\n  if (updateQueue.length === 1) {\n    scheduleTask(() => {\n      const updates = updateQueue.slice();\n      updateQueue.length = 0;\n      const initialSearchString = updates[0].currentSearchString;\n      let searchString;\n      for (let i = 0; i < updates.length; ++i) {\n        const modifiedUpdate = i === 0 ? updates[i] : { ...updates[i], currentSearchString: searchString };\n        searchString = getUpdatedSearchString(modifiedUpdate);\n      }\n      if (args.options.skipUpdateWhenNoChange && searchString === initialSearchString) {\n        return;\n      }\n      updateSearchString({\n        searchString: searchString != null ? searchString : \"\",\n        adapter: updates[updates.length - 1].adapter,\n        navigate: true,\n        updateType: updates[updates.length - 1].updateType\n      });\n    });\n  }\n}\nexport {\n  enqueueUpdate,\n  getUpdatedSearchString,\n  updateSearchString\n};\n//# sourceMappingURL=updateSearchString.js.map\n","function serializeUrlNameMap(paramConfigMap) {\n  let urlNameMapParts;\n  for (const paramName in paramConfigMap) {\n    if (paramConfigMap[paramName].urlName) {\n      const urlName = paramConfigMap[paramName].urlName;\n      const part = `${urlName}\\0${paramName}`;\n      if (!urlNameMapParts)\n        urlNameMapParts = [part];\n      else\n        urlNameMapParts.push(part);\n    }\n  }\n  return urlNameMapParts ? urlNameMapParts.join(\"\\n\") : void 0;\n}\nfunction deserializeUrlNameMap(urlNameMapStr) {\n  if (!urlNameMapStr)\n    return void 0;\n  return Object.fromEntries(\n    urlNameMapStr.split(\"\\n\").map((part) => part.split(\"\\0\"))\n  );\n}\nfunction applyUrlNames(encodedValues, paramConfigMap) {\n  var _a;\n  let newEncodedValues = {};\n  for (const paramName in encodedValues) {\n    if (((_a = paramConfigMap[paramName]) == null ? void 0 : _a.urlName) != null) {\n      newEncodedValues[paramConfigMap[paramName].urlName] = encodedValues[paramName];\n    } else {\n      newEncodedValues[paramName] = encodedValues[paramName];\n    }\n  }\n  return newEncodedValues;\n}\nexport {\n  applyUrlNames,\n  deserializeUrlNameMap,\n  serializeUrlNameMap\n};\n//# sourceMappingURL=urlName.js.map\n","import { useCallback, useMemo } from \"react\";\nimport useQueryParams from \"./useQueryParams\";\nconst useQueryParam = (name, paramConfig, options) => {\n  const paramConfigMap = useMemo(\n    () => ({ [name]: paramConfig != null ? paramConfig : \"inherit\" }),\n    [name, paramConfig]\n  );\n  const [query, setQuery] = useQueryParams(paramConfigMap, options);\n  const decodedValue = query[name];\n  const setValue = useCallback(\n    (newValue, updateType) => {\n      if (typeof newValue === \"function\") {\n        return setQuery((latestValues) => {\n          const newValueFromLatest = newValue(latestValues[name]);\n          return { [name]: newValueFromLatest };\n        }, updateType);\n      }\n      return setQuery({ [name]: newValue }, updateType);\n    },\n    [name, setQuery]\n  );\n  return [decodedValue, setValue];\n};\nexport {\n  useQueryParam\n};\n//# sourceMappingURL=useQueryParam.js.map\n","import { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  StringParam\n} from \"serialize-query-params\";\nimport { decodedParamCache } from \"./decodedParamCache\";\nimport {\n  extendParamConfigForKeys,\n  convertInheritedParamStringsToParams\n} from \"./inheritedParams\";\nimport { makeStableGetLatestDecodedValues } from \"./latestValues\";\nimport { memoSearchStringToObject } from \"./memoSearchStringToObject\";\nimport { mergeOptions } from \"./options\";\nimport { useQueryParamContext } from \"./QueryParamProvider\";\nimport { enqueueUpdate } from \"./updateSearchString\";\nimport { serializeUrlNameMap } from \"./urlName\";\nfunction useQueryParams(arg1, arg2) {\n  const { adapter, options: contextOptions } = useQueryParamContext();\n  const [stableGetLatest] = useState(makeStableGetLatestDecodedValues);\n  const { paramConfigMap: paramConfigMapWithInherit, options } = parseArguments(\n    arg1,\n    arg2\n  );\n  const mergedOptions = useMemo(() => {\n    return mergeOptions(contextOptions, options);\n  }, [contextOptions, options]);\n  let paramConfigMap = convertInheritedParamStringsToParams(\n    paramConfigMapWithInherit,\n    mergedOptions\n  );\n  const parsedParams = memoSearchStringToObject(\n    mergedOptions.searchStringToObject,\n    adapter.location.search,\n    serializeUrlNameMap(paramConfigMap)\n  );\n  if (mergedOptions.includeAllParams) {\n    paramConfigMap = extendParamConfigForKeys(\n      paramConfigMap,\n      Object.keys(parsedParams),\n      mergedOptions.params,\n      StringParam\n    );\n  }\n  const decodedValues = stableGetLatest(\n    parsedParams,\n    paramConfigMap,\n    decodedParamCache\n  );\n  const paramKeyString = Object.keys(paramConfigMap).join(\"\\0\");\n  useEffect(() => {\n    const paramNames = paramKeyString.split(\"\\0\");\n    decodedParamCache.registerParams(paramNames);\n    return () => {\n      decodedParamCache.unregisterParams(paramNames);\n    };\n  }, [paramKeyString]);\n  const callbackDependencies = {\n    adapter,\n    paramConfigMap,\n    options: mergedOptions\n  };\n  const callbackDependenciesRef = useRef(callbackDependencies);\n  if (callbackDependenciesRef.current == null) {\n    callbackDependenciesRef.current = callbackDependencies;\n  }\n  useEffect(() => {\n    callbackDependenciesRef.current.adapter = adapter;\n    callbackDependenciesRef.current.paramConfigMap = paramConfigMap;\n    callbackDependenciesRef.current.options = mergedOptions;\n  }, [adapter, paramConfigMap, mergedOptions]);\n  const [setQuery] = useState(() => {\n    const setQuery2 = (changes, updateType) => {\n      const { adapter: adapter2, paramConfigMap: paramConfigMap2, options: options2 } = callbackDependenciesRef.current;\n      if (updateType == null)\n        updateType = options2.updateType;\n      enqueueUpdate(\n        {\n          changes,\n          updateType,\n          currentSearchString: adapter2.location.search,\n          paramConfigMap: paramConfigMap2,\n          options: options2,\n          adapter: adapter2\n        },\n        { immediate: !options2.enableBatching }\n      );\n    };\n    return setQuery2;\n  });\n  return [decodedValues, setQuery];\n}\nvar useQueryParams_default = useQueryParams;\nfunction parseArguments(arg1, arg2) {\n  let paramConfigMap;\n  let options;\n  if (arg1 === void 0) {\n    paramConfigMap = {};\n    options = arg2;\n  } else if (Array.isArray(arg1)) {\n    paramConfigMap = Object.fromEntries(\n      arg1.map((key) => [key, \"inherit\"])\n    );\n    options = arg2;\n  } else {\n    paramConfigMap = arg1;\n    options = arg2;\n  }\n  return { paramConfigMap, options };\n}\nexport {\n  useQueryParams_default as default,\n  useQueryParams\n};\n//# sourceMappingURL=useQueryParams.js.map\n","import * as React from \"react\";\nimport useQueryParams from \"./useQueryParams\";\nfunction withQueryParams(paramConfigMap, WrappedComponent) {\n  const Component = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    return /* @__PURE__ */ React.createElement(WrappedComponent, {\n      query,\n      setQuery,\n      ...props\n    });\n  };\n  Component.displayName = `withQueryParams(${WrappedComponent.displayName || WrappedComponent.name || \"Component\"})`;\n  return Component;\n}\nvar withQueryParams_default = withQueryParams;\nfunction withQueryParamsMapped(paramConfigMap, mapToProps, WrappedComponent) {\n  const Component = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    const propsToAdd = mapToProps(query, setQuery, props);\n    return /* @__PURE__ */ React.createElement(WrappedComponent, {\n      ...propsToAdd,\n      ...props\n    });\n  };\n  Component.displayName = `withQueryParams(${WrappedComponent.displayName || WrappedComponent.name || \"Component\"})`;\n  return Component;\n}\nexport {\n  withQueryParams_default as default,\n  withQueryParams,\n  withQueryParamsMapped\n};\n//# sourceMappingURL=withQueryParams.js.map\n","module.exports = window[\"React\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from 'use-query-params';\nexport * from 'serialize-query-params';\n"],"names":[],"sourceRoot":""}